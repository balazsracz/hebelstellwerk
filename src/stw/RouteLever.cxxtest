#include "stw/RouteLever.h"

//

#include "stw/LockTable.h"
#include "test_main.h"
#include "utils/MockPin.h"

enum SignalId : uint8_t { SIGNAL_A, SIGNAL_B, SIGNAL_C, SIGNAL_D };

enum TurnoutId : uint8_t { W1a, W1b, W2, W7, W9, W10 };

enum RouteId : uint8_t { a1, b1, a3, b3, c3, d3, c1, d1 };

enum AuxId : uint8_t {
  Bue10_750,
  Gspr1,
  Gspr2,
};

enum BlockId : uint8_t {
  BLOCK_AB,
  BLOCK_CD,
};

/// These identifiers are used for fake GPIO registration.
enum GpioId : gpio_pin_t {
  MIN_GPIO = 35,
  IN_W1a = MIN_GPIO,
  LOCK_W1a,
  IN_W1b,
  LOCK_W1b,
  IN_W2,
  LOCK_W2,
  IN_W7,
  LOCK_W7,
  IN_W9,
  LOCK_W9,
  IN_W10,
  LOCK_W10,
  IN_a1,
  IN_b1,
  LOCK_a1b1,
  IN_a3,
  IN_b3,
  LOCK_a3b3,
  IN_c3,
  IN_d3,
  LOCK_c3d3,
  IN_c1,
  IN_d1,
  LOCK_c1d1,
  IN_A_HP2,
  LOCK_A_HP2,
  IN_B_HP2,
  LOCK_B_HP2,
  IN_C_HP2,
  LOCK_C_HP2,
  IN_D_HP2,
  LOCK_D_HP2,
  AB_LOCK_BTN,
  AB_LOCK_FIELD,
  AB_DETECTOR,
  CD_LOCK_BTN,
  CD_LOCK_FIELD,
  CD_DETECTOR,
  NUM_GPIO
};

/// Intended as a test base class. Declares the objects and the
/// Verschlusstabelle for UWB.
class UWB {
 protected:
  GpioRegistry gpio_reg_;
  TurnoutRegistry turnout_reg_;
  SignalRegistry signal_reg_;
  RouteRegistry route_reg_;
  BlockRegistry block_reg_;

  LockTable ltbl_{{
      Route(a1),          WeichePlus(W1a),    WeichePlus(W1b),
      WeichePlus(W2),     WeichePlus(W9),     WeichePlus(W10),
      Hp2(SIGNAL_A),      Aux(Bue10_750),     BlockIn(BLOCK_AB),  //
      Route(a3),          WeichePlus(W1a),    WeicheMinus(W1b),
      WeichePlus(W7),     WeicheMinus(W9),    WeichePlus(W10),
      Hp2(SIGNAL_A),      Aux(Bue10_750),     BlockIn(BLOCK_AB),  //
      Route(b1),          WeichePlus(W1a),    WeichePlus(W1b),
      WeichePlus(W2),     Hp2(SIGNAL_B),      Aux(Bue10_750),
      BlockOut(BLOCK_AB),  //
      Route(b3),          WeichePlus(W1a),    WeicheMinus(W1b),
      Hp2(SIGNAL_B),      Aux(Bue10_750),     BlockOut(BLOCK_AB),  //
      Route(c1),          WeichePlus(W9),     WeichePlus(W10),
      Hp2(SIGNAL_C),      BlockOut(BLOCK_CD),  //
      Route(c3),          WeichePlus(W7),     WeicheMinus(W9),
      WeichePlus(W10),    BlockOut(BLOCK_CD),
      Hp2(SIGNAL_C),  //
      Route(d1),          WeichePlus(W1a),    WeichePlus(W1b),
      WeichePlus(W2),     WeichePlus(W9),     WeichePlus(W10),
      BlockIn(BLOCK_CD),
      Hp2(SIGNAL_D),  //
      Route(d3),          WeicheMinus(W1b),   WeichePlus(W7),
      WeicheMinus(W9),    WeichePlus(W10),    Hp2(SIGNAL_D),
      BlockIn(BLOCK_CD)  //
  }};

  FakeGpio gpios_{MIN_GPIO, NUM_GPIO - MIN_GPIO};
  // The turnout levers are marked as inverted, to ensure that the default
  // value of gpio(false) means the lever is in the normal state (Plus).
  TurnoutLever TW1a{W1a, IN_W1a, true, LOCK_W1a, false};
  TurnoutLever TW1b{W1b, IN_W1b, true, LOCK_W1b, false};
  TurnoutLever TW2{W2, IN_W2, true, LOCK_W2, false};
  TurnoutLever TW7{W7, IN_W7, true, LOCK_W7, false};
  TurnoutLever TW9{W9, IN_W9, true, LOCK_W9, false};
  TurnoutLever TW10{W10, IN_W10, true, LOCK_W10, false};
  SignalLever SA{SIGNAL_A, HP2, IN_A_HP2, false, LOCK_A_HP2, false};
  SignalLever SB{SIGNAL_B, HP2, IN_B_HP2, false, LOCK_B_HP2, false};
  SignalLever SC{SIGNAL_C, HP2, IN_C_HP2, false, LOCK_C_HP2, false};
  SignalLever SD{SIGNAL_D, HP2, IN_D_HP2, false, LOCK_D_HP2, false};
  RouteLever Rab1{a1, b1, IN_a1, false, IN_b1, false, LOCK_a1b1, false};
  RouteLever Rab3{a3, b3, IN_a3, false, IN_b3, false, LOCK_a3b3, false};
  RouteLever Rcd3{c3, d3, IN_c3, false, IN_d3, false, LOCK_c3d3, false};
  RouteLever Rcd1{c1, d1, IN_c1, false, IN_d1, false, LOCK_c1d1, false};
  Block BlkAB{BLOCK_AB, AB_DETECTOR,   false, AB_LOCK_BTN,
              false,    AB_LOCK_FIELD, false};
  Block BlkCD{BLOCK_CD, CD_DETECTOR,   false, CD_LOCK_BTN,
              false,    CD_LOCK_FIELD, false};
};

class UWBTest : public TestBase, public UWB {
 protected:
  void start() {
    ex_.begin();
    for (unsigned i = 0; i < 300; ++i) {
      ex_.loop();
      ex_.advance(5);
    }
  }
  void wait() {
    for (unsigned i = 0; i < 100; ++i) {
      ex_.loop();
      ex_.advance(5);
    }
  }
};

TEST_F(UWBTest, create) {}

TEST_F(UWBTest, registered) {
  EXPECT_EQ(&Rab1, RouteRegistry::instance()->get(a1));
  EXPECT_EQ(&Rab1, RouteRegistry::instance()->get(b1));
  EXPECT_EQ(&Rab3, RouteRegistry::instance()->get(a3));
  EXPECT_EQ(&Rab3, RouteRegistry::instance()->get(b3));
  EXPECT_EQ(&Rcd1, RouteRegistry::instance()->get(c1));
  EXPECT_EQ(&Rcd1, RouteRegistry::instance()->get(d1));
  EXPECT_EQ(&Rcd3, RouteRegistry::instance()->get(c3));
  EXPECT_EQ(&Rcd3, RouteRegistry::instance()->get(d3));
}

TEST_F(UWBTest, begin_loop) {
  start();
  EXPECT_TRUE(gpios_.get_output(LOCK_W1a));
  EXPECT_TRUE(gpios_.get_output(LOCK_W1b));
  EXPECT_TRUE(gpios_.get_output(LOCK_W2));
  EXPECT_TRUE(gpios_.get_output(LOCK_W7));
  EXPECT_TRUE(gpios_.get_output(LOCK_W9));
  EXPECT_TRUE(gpios_.get_output(LOCK_W10));
  EXPECT_TRUE(gpios_.get_output(LOCK_a1b1));
  EXPECT_TRUE(gpios_.get_output(LOCK_a3b3));
  EXPECT_TRUE(gpios_.get_output(LOCK_c1d1));
  EXPECT_TRUE(gpios_.get_output(LOCK_c3d3));
  EXPECT_TRUE(gpios_.get_output(LOCK_A_HP2));
  EXPECT_TRUE(gpios_.get_output(LOCK_B_HP2));
  EXPECT_TRUE(gpios_.get_output(LOCK_C_HP2));
  EXPECT_TRUE(gpios_.get_output(LOCK_D_HP2));

  // Signal levers are locked.
  EXPECT_TRUE(gpios_.read(LOCK_A_HP2));
  EXPECT_TRUE(gpios_.read(LOCK_B_HP2));
  EXPECT_TRUE(gpios_.read(LOCK_C_HP2));
  EXPECT_TRUE(gpios_.read(LOCK_D_HP2));

  // Turnout levers are unlocked.
  EXPECT_FALSE(gpios_.read(LOCK_W1a));
  EXPECT_FALSE(gpios_.read(LOCK_W1b));
  EXPECT_FALSE(gpios_.read(LOCK_W2));
  EXPECT_FALSE(gpios_.read(LOCK_W7));
  EXPECT_FALSE(gpios_.read(LOCK_W9));
  EXPECT_FALSE(gpios_.read(LOCK_W10));

  // Fstr levers for track 3 are locked.
  EXPECT_TRUE(gpios_.read(LOCK_a3b3));
  EXPECT_TRUE(gpios_.read(LOCK_c3d3));
  // Fstr levers for track 1 are unlocked.
  EXPECT_FALSE(gpios_.read(LOCK_a1b1));
  EXPECT_FALSE(gpios_.read(LOCK_c1d1));
}

TEST_F(UWBTest, set_route_up) {
  start();
  wait();

  EXPECT_FALSE(Rab1.is_route_set(a1));
  EXPECT_FALSE(Rab1.is_route_set(b1));

  gpios_.write(IN_a1, true);
  wait();

  // One route is set.
  EXPECT_TRUE(Rab1.is_route_set(a1));
  EXPECT_FALSE(Rab1.is_route_set(b1));
  // Signal levers are still locked.
  EXPECT_TRUE(gpios_.read(LOCK_A_HP2));
  EXPECT_TRUE(gpios_.read(LOCK_B_HP2));
  EXPECT_TRUE(gpios_.read(LOCK_C_HP2));
  EXPECT_TRUE(gpios_.read(LOCK_D_HP2));

  // The mentioned turnout levers got locked.
  EXPECT_TRUE(gpios_.read(LOCK_W1a));
  EXPECT_TRUE(gpios_.read(LOCK_W1b));
  EXPECT_TRUE(gpios_.read(LOCK_W2));
  EXPECT_FALSE(gpios_.read(LOCK_W7));
  EXPECT_TRUE(gpios_.read(LOCK_W9));
  EXPECT_TRUE(gpios_.read(LOCK_W10));

  // Resetting the lever will unlock the turnouts.
  gpios_.write(IN_a1, false);
  wait();

  EXPECT_FALSE(gpios_.read(LOCK_W1a));
  EXPECT_FALSE(gpios_.read(LOCK_W1b));
  EXPECT_FALSE(gpios_.read(LOCK_W2));
  EXPECT_FALSE(gpios_.read(LOCK_W7));
  EXPECT_FALSE(gpios_.read(LOCK_W9));
  EXPECT_FALSE(gpios_.read(LOCK_W10));
}

TEST_F(UWBTest, die_wrong_route) {
  start();
  EXPECT_DEATH({ Rab1.is_route_set(c1); }, "Asked about a route we don't own");
}

TEST_F(UWBTest, lock_route_up) {
  start();
  wait();

  EXPECT_FALSE(Rab1.is_route_set(a1));
  EXPECT_FALSE(Rab1.is_route_set(b1));

  gpios_.write(IN_a1, true);
  wait();

  EXPECT_TRUE(Rab1.is_route_set(a1));
  EXPECT_FALSE(Rab1.is_route_set(b1));

  // Signal levers are still locked.
  EXPECT_TRUE(gpios_.read(LOCK_A_HP2));
  EXPECT_TRUE(gpios_.read(LOCK_B_HP2));
  EXPECT_TRUE(gpios_.read(LOCK_C_HP2));
  EXPECT_TRUE(gpios_.read(LOCK_D_HP2));

  gpios_.write(AB_LOCK_BTN, true);
  wait();

  // Now one signal lever can go.
  EXPECT_FALSE(gpios_.read(LOCK_A_HP2));
  EXPECT_TRUE(gpios_.read(LOCK_B_HP2));
  EXPECT_TRUE(gpios_.read(LOCK_C_HP2));
  EXPECT_TRUE(gpios_.read(LOCK_D_HP2));

  // and the Fstr lever got locked.
  EXPECT_TRUE(gpios_.read(LOCK_a3b3));
  EXPECT_TRUE(gpios_.read(LOCK_c3d3));
  EXPECT_TRUE(gpios_.read(LOCK_a1b1));
  /// @todo this fails right now EXPECT_TRUE(gpios_.read(LOCK_c1d1));
}
