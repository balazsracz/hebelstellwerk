#include "stw/FelderBlock.h"
#include "stw/RouteLever.h"
#include "test_main.h"
#include "utils/MockPin.h"

enum BlockId : uint8_t {
  BLOCK_AN,
};

/// These identifiers are used for fake GPIO registration.
enum GpioId : gpio_pin_t {
  MIN_GPIO = 35,
  AN_LOCK_BTN,
  AN_LOCK_FIELD,
  AN_DETECTOR,
  AN_VORBLOCK_IN,
  AN_ENDFELD,
  AN_RUCKBLOCK_IN,
  AN_ANFANGSFELD,
  AN_ABGABE_IN,
  AN_ERLAUBNISFELD,
  AN_STORUNGSMELDER,
  AN_HALTSTELLMELDER,
  AN_STRECKENTASTENSPERRE,
  
  KURBEL,

  IN_a1,
  IN_n1,
  LOCK_a1n1,

  IN_A_HP2,
  IN_N_HP2,
  LOCK_A_HP2,
  LOCK_N_HP2,
  
  NUM_GPIO  // always last.

};

enum RouteId : uint8_t { a1, n1 };

enum SignalId : uint8_t {
  SIGNAL_A, // Einfahrt
  SIGNAL_N  // Ausfahrt
};

/// Fake implementation of the I2C block interface. It does not communicate via
/// I2C, but exposes the raw status bits to the owner.
struct FakeI2CBlock : public I2CBlockInterface {
  FakeI2CBlock(uint16_t* ext_status)
      : ext_status_(ext_status) {}

  void set_status(uint16_t status) override {
    *ext_status_ = status;
  }

  uint16_t get_status() override {
    return *ext_status_;
  }
  
 private:
  uint16_t* ext_status_;
};

class FelderBlockTest : public TestBase {
 protected:
  FelderBlockTest() {
    block_.check_setup(block_setup_);
    set(BlockBits::STARTUP);
    set(BlockBits::NEWINPUT);
  }

  void begin() {
    ex_.begin();
  }

  bool has(BlockBits bit) {
    return line_status_ & bit;
  }

  void set(BlockBits bit) {
    line_status_ |= (uint16_t)bit;
  }

  void clr(BlockBits bit) {
    line_status_ &= ~(uint16_t)bit;
  }

  void wait() {
    for (unsigned i = 0; i < 100; ++i) {
      ex_.advance(1);
      ex_.loop();
    }
  }

#define EXPECT_RED(x) EXPECT_FALSE(gpios_.read(x))
#define EXPECT_WHITE(x) EXPECT_TRUE(gpios_.read(x))
  
  GpioRegistry gpio_reg_;
  TurnoutRegistry turnout_reg_;
  SignalRegistry signal_reg_;
  RouteRegistry route_reg_;
  BlockRegistry block_reg_;
  GlobalState g_cmd_;

  LockTable ltbl_{{
      Route(a1), Hp2(SIGNAL_A), BlockIn(BLOCK_AN),  //
      Route(n1), Hp2(SIGNAL_N), BlockOut(BLOCK_AN)  //
  }};

  uint16_t line_status_{0};
  FakeI2CBlock i2c_blk_{&line_status_};
  
  FakeGpio gpios_{MIN_GPIO, NUM_GPIO - MIN_GPIO};
  FelderBlock block_{&i2c_blk_, BLOCK_AN, AN_DETECTOR,   false, AN_LOCK_BTN,
                     false,    AN_LOCK_FIELD, false};
  RouteLever Ran1{a1, n1, IN_a1, false, IN_n1, false, LOCK_a1n1, false};
  SignalLever Sa{SIGNAL_A, HP2, IN_A_HP2, false, LOCK_A_HP2, false};
  SignalLever Sn{SIGNAL_N, HP2, IN_N_HP2, false, LOCK_N_HP2, false};
  const uint16_t block_setup_ = 
      block_.set_vorblock_taste(AN_VORBLOCK_IN, false) |
      block_.set_ruckblock_taste(AN_RUCKBLOCK_IN, false) |
      block_.set_abgabe_taste(AN_ABGABE_IN, false) |
      block_.set_kurbel(KURBEL, false) |
      block_.set_anfangsfeld(AN_ANFANGSFELD, false) |
      block_.set_endfeld(AN_ENDFELD, false) |
      block_.set_erlaubnisfeld(AN_ERLAUBNISFELD, false) |
      block_.set_storungsmelder(AN_STORUNGSMELDER, false) |
      block_.set_signalhaltmelder(AN_HALTSTELLMELDER, false) |
      block_.set_streckentastensperre(AN_STRECKENTASTENSPERRE, false);
};

TEST_F(FelderBlockTest, create) {}

TEST_F(FelderBlockTest, create2) {
  begin();
  wait();
}

TEST_F(FelderBlockTest, cold_start_startup_state) {
  begin();
  wait();
  EXPECT_WHITE(AN_ERLAUBNISFELD);
  EXPECT_WHITE(AN_ENDFELD);
  EXPECT_WHITE(AN_ANFANGSFELD);

  // Output state
  EXPECT_TRUE(has(BlockBits::TRACK_OUT));
  EXPECT_FALSE(has(BlockBits::HANDOFF));
  EXPECT_FALSE(has(BlockBits::OUT_BUSY));
  EXPECT_FALSE(has(BlockBits::IN_BUSY));
  
  // Cold start should be cleared.
  EXPECT_FALSE(has(BlockBits::STARTUP));
  EXPECT_FALSE(has(BlockBits::NEWINPUT));
  // Signaled output.
  EXPECT_TRUE(has(BlockBits::NEWOUTPUT));
}

TEST_F(FelderBlockTest, unlocked_ruckblock) {
  g_cmd_.is_unlocked_ = true;
  begin();
  wait();
  gpios_.write(AN_RUCKBLOCK_IN, true);
  gpios_.write(KURBEL, true);
  wait();
  EXPECT_FALSE(has(BlockBits::TRACK_OUT));
  EXPECT_TRUE(has(BlockBits::HANDOFF));
  EXPECT_FALSE(has(BlockBits::IN_BUSY));
  EXPECT_TRUE(has(BlockBits::NEWOUTPUT));

  EXPECT_RED(AN_ERLAUBNISFELD);
  EXPECT_WHITE(AN_ENDFELD);
  EXPECT_WHITE(AN_ANFANGSFELD);

  gpios_.write(AN_RUCKBLOCK_IN, false);
  gpios_.write(KURBEL, false);
  clr(BlockBits::NEWOUTPUT);
  wait();
}

TEST_F(FelderBlockTest, unlocked_handoff) {
  g_cmd_.is_unlocked_ = true;
  begin();
  wait();
  gpios_.write(AN_ABGABE_IN, true);
  gpios_.write(KURBEL, true);
  wait();
  EXPECT_FALSE(has(BlockBits::TRACK_OUT));
  EXPECT_TRUE(has(BlockBits::HANDOFF));
  EXPECT_TRUE(has(BlockBits::NEWOUTPUT));
  EXPECT_FALSE(has(BlockBits::IN_BUSY));
  EXPECT_FALSE(has(BlockBits::OUT_BUSY));

  EXPECT_RED(AN_ERLAUBNISFELD);
  EXPECT_WHITE(AN_ENDFELD);
  EXPECT_WHITE(AN_ANFANGSFELD);

  gpios_.write(AN_ABGABE_IN, false);
  gpios_.write(KURBEL, false);
  clr(BlockBits::NEWOUTPUT);
  wait();
}

TEST_F(FelderBlockTest, unlocked_vorblock) {
  g_cmd_.is_unlocked_ = true;
  begin();
  wait();
  gpios_.write(AN_VORBLOCK_IN, true);
  gpios_.write(KURBEL, true);
  wait();
  EXPECT_TRUE(has(BlockBits::TRACK_OUT));
  EXPECT_FALSE(has(BlockBits::HANDOFF));
  EXPECT_TRUE(has(BlockBits::NEWOUTPUT));
  EXPECT_FALSE(has(BlockBits::IN_BUSY));
  EXPECT_TRUE(has(BlockBits::OUT_BUSY));

  EXPECT_WHITE(AN_ERLAUBNISFELD);
  EXPECT_WHITE(AN_ENDFELD);
  EXPECT_RED(AN_ANFANGSFELD);
  
  gpios_.write(AN_ABGABE_IN, false);
  gpios_.write(KURBEL, false);
  clr(BlockBits::NEWOUTPUT);
  wait();
}

TEST_F(FelderBlockTest, recover_out_free) {
  line_status_ = 0;
  set(BlockBits::TRACK_OUT);
  begin();
  wait();

  EXPECT_WHITE(AN_ERLAUBNISFELD);
  EXPECT_WHITE(AN_ENDFELD);
  EXPECT_WHITE(AN_ANFANGSFELD);
}

TEST_F(FelderBlockTest, recover_out_busy) {
  line_status_ = 0;
  set(BlockBits::TRACK_OUT);
  set(BlockBits::OUT_BUSY);
  begin();
  wait();

  EXPECT_WHITE(AN_ERLAUBNISFELD);
  EXPECT_WHITE(AN_ENDFELD);
  EXPECT_RED(AN_ANFANGSFELD);
}

TEST_F(FelderBlockTest, recover_in_free) {
  line_status_ = 0;
  set(BlockBits::HANDOFF);
  begin();
  wait();

  EXPECT_RED(AN_ERLAUBNISFELD);
  EXPECT_WHITE(AN_ENDFELD);
  EXPECT_WHITE(AN_ANFANGSFELD);
}

TEST_F(FelderBlockTest, recover_in_busy) {
  line_status_ = 0;
  set(BlockBits::HANDOFF);
  set(BlockBits::IN_BUSY);
  begin();
  wait();

  EXPECT_RED(AN_ERLAUBNISFELD);
  EXPECT_RED(AN_ENDFELD);
  EXPECT_WHITE(AN_ANFANGSFELD);
}


TEST_F(FelderBlockTest, regular_handoff) {
  // Starting state in+free
  line_status_ = 0;
  set(BlockBits::TRACK_OUT);
  begin();
  wait();

  EXPECT_WHITE(AN_ERLAUBNISFELD);
  EXPECT_WHITE(AN_ENDFELD);
  EXPECT_WHITE(AN_ANFANGSFELD);

  // Now we press the buttons
  gpios_.write(AN_ABGABE_IN, true);
  gpios_.write(KURBEL, true);
  wait();

  EXPECT_RED(AN_ERLAUBNISFELD);
  EXPECT_WHITE(AN_ENDFELD);
  EXPECT_WHITE(AN_ANFANGSFELD);

  EXPECT_FALSE(has(BlockBits::TRACK_OUT));
  EXPECT_TRUE(has(BlockBits::HANDOFF));
  EXPECT_TRUE(has(BlockBits::NEWOUTPUT));
  EXPECT_FALSE(has(BlockBits::IN_BUSY));
  EXPECT_FALSE(has(BlockBits::OUT_BUSY));

  // Block responds
  clr(BlockBits::NEWOUTPUT);
  wait();

  EXPECT_RED(AN_ERLAUBNISFELD);
  EXPECT_WHITE(AN_ENDFELD);
  EXPECT_WHITE(AN_ANFANGSFELD);
}

TEST_F(FelderBlockTest, regular_vorblock) {
  line_status_ = 0;
  set(BlockBits::TRACK_OUT);
  begin();
  wait();

  EXPECT_WHITE(AN_ERLAUBNISFELD);
  EXPECT_WHITE(AN_ENDFELD);
  EXPECT_WHITE(AN_ANFANGSFELD);

  
}
