#include "stw/LockTable.h"

//

#include "test_main.h"

enum RouteId : uint8_t {
  ROUTE_A1,
  ROUTE_A2,
  ROUTE_A3,
  ROUTE_B1,
  ROUTE_B2,
  ROUTE_B3,
  ROUTE_C1,
  ROUTE_C2,
  ROUTE_C3,
  ROUTE_D1,
  ROUTE_D2,
  ROUTE_D3
};

enum TurnoutId : uint8_t {
  TURNOUT_1,
  TURNOUT_2,
  TURNOUT_8,
  TURNOUT_9,
};

enum SignalId : uint8_t {
  SIGNAL_A,
  SIGNAL_B,
  SIGNAL_C,
  SIGNAL_D,
};

enum BlockId : uint8_t {
  BLOCK_AB,
  BLOCK_CD,
};

TEST(LockTableTest, simple) {
  LockTable tbl(                                                //
      {Route(ROUTE_A1), TurnoutPlus(TURNOUT_1), Hp2(SIGNAL_A),  //
       Route(ROUTE_B1), TurnoutMinus(TURNOUT_8), Hp1(SIGNAL_C)});

  EXPECT_EQ(&tbl, LockTable::instance());
}

TEST(LockTableTest, get_row) {
  LockTable tbl(                                                 //
      {Route(ROUTE_A1), TurnoutPlus(TURNOUT_1), Hp2(SIGNAL_A),   //
       Route(ROUTE_B1), TurnoutMinus(TURNOUT_8), Hp1(SIGNAL_C),  //
       Route(ROUTE_D1), Route(ROUTE_D2)});

  auto* ptr = tbl.begin();
  auto ret = tbl.find_route(ROUTE_A1);
  EXPECT_EQ(ptr, ret.ptr);
  EXPECT_EQ(3u, ret.size);

  ret = tbl.find_route(ROUTE_B1);
  EXPECT_EQ(ptr + 3, ret.ptr);
  EXPECT_EQ(3u, ret.size);

  ret = tbl.find_route(ROUTE_C1);
  EXPECT_EQ(nullptr, ret.ptr);
  EXPECT_EQ(0u, ret.size);

  ret = tbl.find_route(ROUTE_D1);
  EXPECT_EQ(ptr + 6, ret.ptr);
  EXPECT_EQ(1u, ret.size);

  ret = tbl.find_route(ROUTE_D2);
  EXPECT_EQ(ptr + 7, ret.ptr);
  EXPECT_EQ(1u, ret.size);
}

TEST(LockTableTest, find_block) {
  LockTable tbl(  //
      {
          Route(ROUTE_A1),
          TurnoutPlus(TURNOUT_1),
          BlockOut(BLOCK_AB),
          Hp2(SIGNAL_A),  //
          //
          Route(ROUTE_B1),
          TurnoutMinus(TURNOUT_8),
          Hp1(SIGNAL_C),
          BlockOut(BLOCK_CD),  //
          //
          Route(ROUTE_D1),
          BlockIn(BLOCK_CD),  //
          //
          Route(ROUTE_D2),
      });

  bool is_out = false;
  EXPECT_EQ(BLOCK_AB,
            LockTable::find_block(tbl.find_route(ROUTE_A1), &is_out));
  EXPECT_TRUE(is_out);

  is_out = false;
  EXPECT_EQ(BLOCK_CD,
            LockTable::find_block(tbl.find_route(ROUTE_B1), &is_out));
  EXPECT_TRUE(is_out);

  is_out = true;
  EXPECT_EQ(BLOCK_CD,
            LockTable::find_block(tbl.find_route(ROUTE_D1), &is_out));
  EXPECT_FALSE(is_out);

  is_out = true;
  EXPECT_EQ(NO_BLOCK,
            LockTable::find_block(tbl.find_route(ROUTE_D2), &is_out));
}

TEST(LockTableTest, find_signal) {
  LockTable tbl(  //
      {
          Route(ROUTE_A1),
          TurnoutPlus(TURNOUT_1),
          BlockOut(BLOCK_AB),
          Hp2(SIGNAL_A),  //
          //
          Route(ROUTE_B1),
          TurnoutMinus(TURNOUT_8),
          Hp1(SIGNAL_C),
          BlockOut(BLOCK_CD),  //
          //
          Route(ROUTE_D1),
          BlockIn(BLOCK_CD),  //
          //
          Route(ROUTE_D2),
      });

  SignalAspect aspect = HP0;
  EXPECT_EQ(SIGNAL_A,
            LockTable::find_signal(tbl.find_route(ROUTE_A1), &aspect));
  EXPECT_EQ(HP2, aspect);

  aspect = HP0;
  EXPECT_EQ(SIGNAL_C,
            LockTable::find_signal(tbl.find_route(ROUTE_B1), &aspect));
  EXPECT_EQ(HP1, aspect);

  aspect = HP0;
  EXPECT_EQ(NO_SIGNAL,
            LockTable::find_signal(tbl.find_route(ROUTE_D1), &aspect));
  EXPECT_EQ(HP0, aspect);

  aspect = HP0;
  EXPECT_EQ(NO_SIGNAL,
            LockTable::find_signal(tbl.find_route(ROUTE_D2), &aspect));
  EXPECT_EQ(HP0, aspect);
}

