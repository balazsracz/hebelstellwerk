#include "utils/GpioRegistry.h"

#include "test_main.h"

class RegistryTest : public TestBase {
 protected:
  RegistryTest() {
    reg_.register_obj(&ga_, 10, Count{10});
    reg_.register_obj(&gb_, 30, Count{10});
    reg_.register_obj(&gc_, 20, Count{9});
  }

  std::vector<gpio_pin_t> xrange(gpio_pin_t start, gpio_pin_t end) {
    std::vector<gpio_pin_t> ret;
    for (gpio_pin_t i = start; i < end; ++i) {
      ret.push_back(i);
    }
    return ret;
  }

  DummyGpio ga_, gb_, gc_;

  GpioRegistry reg_;
};

TEST_F(RegistryTest, create) {}

TEST_F(RegistryTest, query_correct) {
  for (auto i : xrange(10, 20)) {
    EXPECT_EQ(&ga_, reg_.get(i));
  }
  for (auto i : xrange(20, 29)) {
    EXPECT_EQ(&gc_, reg_.get(i));
  }
  for (auto i : xrange(30, 40)) {
    EXPECT_EQ(&gb_, reg_.get(i));
  }
}

TEST_F(RegistryTest, query_incorrect) {
  EXPECT_EQ(nullptr, reg_.get_or_null(29));
  EXPECT_EQ(nullptr, reg_.get_or_null(9));
  EXPECT_EQ(nullptr, reg_.get_or_null(40));
  EXPECT_EQ(nullptr, reg_.get_or_null(41));
  for (auto i : xrange(0, 10)) {
    EXPECT_EQ(nullptr, reg_.get_or_null(i));
  }
}

TEST_F(RegistryTest, get_incorrect) {
  EXPECT_DEATH({ reg_.get(29); }, "Requested object not found");
  EXPECT_DEATH({ reg_.get(9); }, "Requested object not found");
  EXPECT_DEATH({ reg_.get(40); }, "Requested object not found");
}

TEST_F(RegistryTest, overlap_register) {
  EXPECT_DEATH(
      {  //
        reg_.register_obj(&ga_, 10);
      },
      "Overlapping registrations");
  EXPECT_DEATH(
      {  //
        reg_.register_obj(&ga_, 11, Count{40-11});
      },
      "Overlapping registrations");
}

TEST_F(RegistryTest, get_no_pin) {
  auto* ptr = reg_.get(NO_PIN);
  EXPECT_NE(ptr, nullptr);
  ptr->set_input(NO_PIN);
  ptr->set_output(NO_PIN);
  ptr->write(NO_PIN, false);
  ptr->read(NO_PIN);
}
