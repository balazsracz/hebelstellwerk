#include "utils/Singleton.h"

#include "test_main.h"

class MyClass : public Singleton<MyClass> {
 public:
  int x_;
};

DEFINE_SINGLETON_INSTANCE(MyClass);

TEST(SingletonTest, CreateAndGetSingle) {
  EXPECT_FALSE(MyClass::exists());
  MyClass obj;
  EXPECT_EQ(&obj, MyClass::instance());
  EXPECT_EQ(&obj, MyClass::instance());
}

TEST(SingletonTest, CreateAndGetMultiple) {
  MyClass* p;
  EXPECT_FALSE(MyClass::exists());
  {
    MyClass obj;
    p = &obj;
    EXPECT_EQ(p, MyClass::instance());
    EXPECT_TRUE(MyClass::exists());
  }
  EXPECT_FALSE(MyClass::exists());
  {
    MyClass obj2;
    EXPECT_EQ(&obj2, MyClass::instance());
    EXPECT_NE(p, &obj2);
    EXPECT_TRUE(MyClass::exists());
  }
  EXPECT_FALSE(MyClass::exists());
}

TEST(SingletonTest, DieEmptyRef) {
  MyClass* p;
  EXPECT_DEATH({ p = MyClass::instance(); }, "instance_ != nullptr");
  {
    MyClass obj;
    p = &obj;
    EXPECT_EQ(p, MyClass::instance());
  }
  EXPECT_DEATH({ p = MyClass::instance(); }, "instance_ != nullptr");
}

TEST(SingletonTest, DieMultipleInstances) {
  MyClass* p;
  MyClass obj;
  p = &obj;
  EXPECT_DEATH(
      {
        MyClass obj2;
        p = MyClass::instance();
      },
      "instance_ == nullptr");
  EXPECT_NE(p, nullptr);
}
